{"version":3,"file":"static/js/947.e9451835.chunk.js","mappings":"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","sources":["components/ErrorMsg/styles.ts","components/ErrorMsg/ErrorMsg.tsx","components/FornikWrapper/FornikWrapper.tsx","hooks/redux.ts","pages/Details/styles.ts","components/FormEditUser/styles.ts","components/FormEditUser/FormEditUser.tsx","pages/Details/Details.tsx","selectors/userSelector.ts","store/reducers/UserAction.ts","validations/validationAddUser.ts"],"sourcesContent":["import styled from 'styled-components';\nimport { EColors } from '../../ENUM/Enum';\n\ninterface IErrorMsg {\n  ErrorText?: any;\n}\n\nexport const S: IErrorMsg = {};\n\nS.ErrorText = styled.ul`\n  position: absolute;\n  bottom: 4px;\n  left: 5px;\n  color: ${EColors.orangeNavigation};\n  font-size: 12px;\n  letter-spacing: 1.5px;\n`;\n","import React from 'react';\nimport { S } from './styles';\n\nconst ErrorMsg: React.FC<{ msg: string }> = ({ msg }) => {\n  return <S.ErrorText>{msg}</S.ErrorText>;\n};\n\nexport default ErrorMsg;\n","import React from 'react';\nimport { Formik, useFormik } from 'formik';\nimport { ICreateUser } from '../../interface';\nimport * as Yup from 'yup';\nimport { ISchema } from '../../validations/validationAddUser';\nimport { PropsFormAddUser } from '../FormAddUser/FormAddUser';\n\ninterface Props {\n  initialValues: ICreateUser;\n  validationSchema: Yup.SchemaOf<ISchema>;\n  Component: React.FC<PropsFormAddUser>;\n  handleSubmit: (data: any) => void;\n  rest?: undefined;\n}\n\nexport interface IUseFormik {\n  initialValues: any;\n  enableReinitialize: boolean;\n  validationSchema: Yup.SchemaOf<ISchema>;\n  validateOnChange: boolean;\n  validateOnBlur: boolean;\n  onSubmit: (data: any) => void;\n}\n\nconst FormikWrapper: React.FC<Props> = ({\n  initialValues,\n  validationSchema,\n  Component,\n  handleSubmit,\n}) => {\n  const formik = useFormik({\n    initialValues: initialValues,\n    enableReinitialize: true,\n    validationSchema: validationSchema,\n    validateOnChange: false,\n    validateOnBlur: false,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <Formik onSubmit={handleSubmit} initialValues={initialValues}>\n      <Component formik={formik} />\n    </Formik>\n  );\n};\n\nexport default FormikWrapper;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../store/store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import styled from 'styled-components';\nimport { EColors } from '../../ENUM/Enum';\n\ninterface IElementsDetails {\n  WrapperDetails?: any;\n  DetailsHeader?: any;\n  DetailsTitle?: any;\n  EditBtn?: any;\n  MainContent?: any;\n  AvatarInner?: any;\n  Avatar?: any;\n  AvatarTitle?: any;\n  Desc?: any;\n  WrapperForm?: any;\n}\n\nexport const S: IElementsDetails = {};\n\nS.WrapperDetails = styled.section``;\nS.DetailsHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-weight: 600;\n  margin-bottom: 30px;\n`;\n\nS.DetailsTitle = styled.h3`\n  letter-spacing: 2px;\n  font-size: 24px;\n`;\n\nS.EditBtn = styled.button`\n  position: relative;\n  z-index: 2;\n  padding: 10px 15px;\n  background-color: ${EColors.headerBackground};\n  color: ${EColors.waite};\n  text-transform: uppercase;\n  border-radius: 8px;\n\n  &:hover {\n    background-color: ${EColors.orangeNavigation};\n    cursor: pointer;\n  }\n`;\n\nS.MainContent = styled.div`\n  display: flex;\n\n  @media (max-width: 568px) {\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nS.AvatarInner = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nS.Avatar = styled.img`\n  max-width: 150px;\n`;\n\nS.AvatarTitle = styled.div`\n  margin-top: 20px;\n`;\n\nS.Desc = styled.div`\n  padding-left: 30px;\n`;\n\nS.WrapperForm = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import styled from 'styled-components';\nimport { EColors } from '../../ENUM/Enum';\n\ninterface IElementsForm {\n  Form?: any;\n  FormTitle?: any;\n  FormInput?: any;\n  FormTextarea?: any;\n  FormButton?: any;\n}\n\nexport const S: IElementsForm = {};\n\nS.Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-top: 30px;\n  width: 100%;\n  min-width: 240px;\n  max-width: 440px;\n\n  > label {\n    position: relative;\n  }\n`;\nS.FormTitle = styled.h3`\n  font-size: 24px;\n  letter-spacing: 2px;\n  font-weight: 600;\n  text-align: center;\n  margin-bottom: 20px;\n`;\nS.FormInput = styled.input`\n  margin-bottom: 25px;\n  padding: 6px 10px;\n  border-bottom: 2px solid ${EColors.orangeNavigation};\n  background-color: transparent;\n  width: 100%;\n  outline: none;\n`;\nS.FormTextarea = styled.textarea`\n  width: 100%;\n  height: 80px;\n  margin-bottom: 20px;\n  padding: 6px 10px;\n  border-bottom: 2px solid ${EColors.orangeNavigation};\n  background-color: transparent;\n  resize: none;\n  outline: none;\n`;\nS.FormButton = styled.button`\n  letter-spacing: 2px;\n  margin-top: 25px;\n  text-transform: uppercase;\n  padding: 6px 0;\n  background-color: ${EColors.orangeNavigation};\n`;\n","import React from 'react';\nimport ErrorMsg from '../ErrorMsg/ErrorMsg';\nimport { PropsFormAddUser } from '../FormAddUser/FormAddUser';\nimport { S } from './styles';\n\nexport const FormEditUser: React.FC<PropsFormAddUser> = ({ formik }) => {\n  return (\n    <S.Form onSubmit={formik.handleSubmit}>\n      <S.FormTitle>Edit</S.FormTitle>\n      <label htmlFor=''>\n        <S.FormInput\n          value={formik.values.name?.trim()}\n          onChange={formik.handleChange}\n          name='name'\n          placeholder='Name'\n          type='text'\n        />\n        {formik.errors.name ? <ErrorMsg msg={formik.errors.name} /> : null}\n      </label>\n      <label htmlFor=''>\n        <S.FormInput\n          value={formik.values.surname?.trim()}\n          onChange={formik.handleChange}\n          name='surname'\n          placeholder='Surname'\n          type='text'\n        />\n        {formik.errors.surname ? (\n          <ErrorMsg msg={formik.errors.surname} />\n        ) : null}\n      </label>\n      <label htmlFor=''>\n        <S.FormTextarea\n          value={formik.values.desc}\n          onChange={formik.handleChange}\n          name='desc'\n          placeholder='Write something about the user ðŸ˜€'\n        />\n        {formik.errors.desc ? <ErrorMsg msg={formik.errors.desc} /> : null}\n      </label>\n      <S.FormButton type='submit'>send</S.FormButton>\n    </S.Form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux';\nimport { selectorUser } from '../../selectors/userSelector';\nimport { editUserFeatch } from '../../store/reducers/UserSlice';\nimport userImg from '../../assets/images/user.png';\nimport { S } from './styles';\nimport { ICreateUser, IUsers } from '../../interface';\nimport FormikWrapper from '../../components/FornikWrapper/FornikWrapper';\nimport { AddUserSchema } from '../../validations/validationAddUser';\nimport { FormEditUser } from '../../components/FormEditUser/FormEditUser';\nimport { setUserAction } from '../../store/reducers/UserAction';\n\nconst Details: React.FC = () => {\n  const [openModal, setOpenModal] = useState<boolean>(false);\n  const user = useAppSelector<IUsers>(selectorUser);\n  const dispatch = useAppDispatch();\n  const { params } = useRouteMatch();\n\n  useEffect(() => {\n    dispatch(setUserAction(params));\n  }, []);\n\n  const initialValueAddUser: ICreateUser = {\n    name: user.name,\n    surname: user.surname,\n    desc: user.desc,\n  };\n\n  const handleSubmitAddUser = (data: ICreateUser) => {\n    dispatch(editUserFeatch({ ...params, data }));\n    setOpenModal(false);\n  };\n\n  return (\n    <S.WrapperDetails>\n      {Object.keys(user).length ? (\n        <>\n          <S.DetailsHeader>\n            <S.DetailsTitle>Profile</S.DetailsTitle>\n            <S.EditBtn onClick={() => setOpenModal(!openModal)} type='button'>\n              {openModal ? 'close' : 'edit'}\n            </S.EditBtn>\n          </S.DetailsHeader>\n          <S.MainContent>\n            <S.AvatarInner>\n              <S.Avatar src={userImg} alt='avatar' />\n              <S.AvatarTitle>{`${user.name} ${user.surname}`}</S.AvatarTitle>\n            </S.AvatarInner>\n            <S.Desc>{user.desc}</S.Desc>\n          </S.MainContent>\n          <S.WrapperForm>\n            {openModal && (\n              <FormikWrapper\n                initialValues={initialValueAddUser}\n                Component={FormEditUser}\n                handleSubmit={handleSubmitAddUser}\n                validationSchema={AddUserSchema}\n              />\n            )}\n          </S.WrapperForm>{' '}\n        </>\n      ) : null}\n    </S.WrapperDetails>\n  );\n};\n\nexport default Details;\n","import { RootState } from '../store/store';\n\nexport const selectorIsLouder = (state: RootState) => {\n  return state.user.isLoading;\n};\n\nexport const selectorUsers = (state: RootState) => {\n  return state.user.users;\n};\n\nexport const selectorError = (state: RootState) => {\n  return state.user.error;\n};\n\nexport const selectorUser = (state: RootState) => {\n  return state.user.user;\n};\n","import { IUsers } from '../../interface';\nimport { StrinOrNumber } from '../actionTypes/actionTypes';\nimport {\n  EActionUser,\n  IPostUserAction,\n  IRemoveUserAction,\n  ISetUserAction,\n} from './UserActionTypes';\n\nexport const setUserAction = (payload: StrinOrNumber): ISetUserAction => ({\n  type: EActionUser.GET_USER,\n  payload,\n});\n\nexport const postUserAction = (payload: IUsers): IPostUserAction => ({\n  type: EActionUser.POST_USER,\n  payload,\n});\n\nexport const removeUserAction = (\n  payload: StrinOrNumber | undefined\n): IRemoveUserAction => ({\n  type: EActionUser.REMOVE_USER,\n  payload,\n});\n","import * as Yup from 'yup';\nimport { EValidation, WITHOUT_WHITE_SPACE_REGEXP } from '../ENUM/Enum';\n\nexport interface ISchema {\n  name: string;\n  surname: string;\n  desc: string;\n}\n\nexport const AddUserSchema: Yup.SchemaOf<ISchema> = Yup.object().shape({\n  name: Yup.string()\n    .matches(WITHOUT_WHITE_SPACE_REGEXP, 'enter_a_valid_email')\n    .min(EValidation.minCharacters, 'Must contain at least two characters')\n    .required('First name is required'),\n  surname: Yup.string()\n    .matches(WITHOUT_WHITE_SPACE_REGEXP, 'cannot_contain_spaces')\n    .min(EValidation.minCharacters, 'Must contain at least two characters')\n    .required('Last name is required'),\n  desc: Yup.string()\n    .min(EValidation.minCharactersDesc, 'Must be at least 25 characters long')\n    .required('Description is required'),\n});\n"],"names":["S","ErrorText","styled","EColors","msg","initialValues","validationSchema","Component","handleSubmit","formik","useFormik","enableReinitialize","validateOnChange","validateOnBlur","onSubmit","useAppDispatch","useDispatch","useAppSelector","useSelector","WrapperDetails","DetailsHeader","DetailsTitle","EditBtn","MainContent","AvatarInner","Avatar","AvatarTitle","Desc","WrapperForm","Form","FormTitle","FormInput","FormTextarea","FormButton","FormEditUser","htmlFor","value","values","name","trim","onChange","handleChange","placeholder","type","errors","ErrorMsg","surname","desc","useState","openModal","setOpenModal","user","selectorUser","dispatch","params","useRouteMatch","useEffect","setUserAction","initialValueAddUser","Object","keys","length","onClick","src","userImg","alt","data","editUserFeatch","AddUserSchema","selectorIsLouder","state","isLoading","selectorUsers","users","payload","EActionUser","postUserAction","removeUserAction","Yup","shape","matches","WITHOUT_WHITE_SPACE_REGEXP","min","EValidation","required"],"sourceRoot":""}